from EntityModel.CompositeTask import CompositeTask
from EntityModel.SimpleTask import SimpleTask
from EntityModel.Resource import Resource
from flask import Flask, jsonify, request
import main_func
import json
import os.path
import sys

def addResource(rname,rdailycost,rtype,rallocatedtasks):
    
    resource = Resource(main_func.getId(), rname, rdailycost, rtype, rallocatedtasks)
      
    resource_json = main_func.jdefault(resource)
    project_json = None
    with open(os.path.join(sys.path[0]+'/static/data', 'Project.json'), 'r') as inFile:
        project_json = json.load(inFile);

    project_json['resources'].append(resource_json)
    taskList = project_json['children']

    if rallocatedtasks != Null:
    	associateResource(taskList,resource,rallocatedtasks)
    project_json['children'] = taskList

    with open(os.path.join(sys.path[0]+'/static/data', 'Project.json'), 'w') as outFile:
        json.dump(project_json, outFile)
  
    return json.dumps(project_json, default=main_func.jdefault, indent = 2)

def associateResource(taskList,resource,rallocatedtasks):
    for task in taskList:
        if task['id'] in rallocatedtasks:
            if resource.id not in task['resources']:
                task['resources'].append(resource.id)
        if task.has_key('children'):
            children = task['children']
            if children:
                associateResource(children,resource,rallocatedtasks)
